##MYSQL QUERIES FOR COMPLETE IMPLEMENTATION


create database myrestaurant;
use myrestaurant;


##creating entity tables with required integrity constraints

create table customer
(c_id int PRIMARY KEY,
 cname varchar(50) NOT NULL,
 address varchar(100) NOT NULL,
 mobile_no bigint(10) NOT NULL,
 c_email varchar(50) NOT NULL) 
 ENGINE = InnoDB;

create table department
(deptno int PRIMARY KEY,
 dname varchar(50) NOT NULL,
 monthly_budget numeric(12,2) NOT NULL) 
 ENGINE = InnoDB;

create table dining_table
(table_no int PRIMARY KEY,
 capacity int NOT NULL,
 location enum('IndoorRegular', 'IndoorSpecial', 'Outdoor', 'Terrace') NOT NULL) 
 ENGINE = InnoDB;

create table employee
(e_id int PRIMARY KEY,
 ename varchar(50) NOT NULL,
 deptno int NOT NULL,
 mobile_no bigint(10) NOT NULL,
 address varchar(100) NOT NULL,
 salary numeric(10,2) NOT NULL,
 join_date date NOT NULL,
 FOREIGN KEY(deptno) references department(deptno) on delete cascade) 
 ENGINE = InnoDB;

create table date_time_slot
(slot_id int PRIMARY KEY,
 res_date date NOT NULL,
 res_time time NOT NULL,
 type enum('Rush','Relaxed') NOT NULL) 
 ENGINE = InnoDB;
 
create table waiter
(e_id int PRIMARY KEY,
 position varchar(30),
 FOREIGN KEY(e_id) references employee(e_id) on delete cascade) 
 ENGINE = InnoDB;

create table cook
(e_id int PRIMARY KEY,
 rating int,
 speciality_category enum('Veg','Non-Veg','Both'),
 FOREIGN KEY(e_id) references employee(e_id) on delete cascade, 
 CHECK(rating>=1 and rating<=5)) 
 ENGINE = InnoDB;

create table cashier
(e_id int PRIMARY KEY,
 qualification varchar(100),
 FOREIGN KEY (e_id) references employee(e_id) on delete cascade) 
 ENGINE = InnoDB;

create table reservation
(c_id int,
 booking_date date,
 booking_time time,
 PRIMARY KEY(c_id,booking_date,booking_time),
 FOREIGN KEY(c_id) references customer(c_id) on delete cascade) 
 ENGINE = InnoDB;

create table receipts
(r_id int PRIMARY KEY AUTO_INCREMENT,
 tot_amt numeric(10,2) NOT NULL,
 status enum('Paid','Unpaid') NOT NULL,
 c_id int NOT NULL,
 booking_date date NOT NULL,
 booking_time time NOT NULL,
 e_id int NOT NULL,
 FOREIGN KEY(c_id,booking_date,booking_time) references reservation(c_id,booking_date,booking_time) on delete restrict,
 FOREIGN KEY(e_id) references cashier(e_id),
 CHECK(tot_amt>=0)) 
 ENGINE = InnoDB;


##creating relationship tables with required integrity constraints

create table food_prepared_by
(c_id int,
 booking_date date,
 booking_time time,
 e_id int,
 PRIMARY KEY(c_id,booking_date,booking_time,e_id),
 FOREIGN KEY(e_id) references cook(e_id),
 FOREIGN KEY(c_id,booking_date,booking_time) references reservation(c_id,booking_date,booking_time)) 
 ENGINE = InnoDB;

create table served_by
(c_id int,
 booking_date date,
 booking_time time,
 e_id int,
 PRIMARY KEY(c_id,booking_date,booking_time,e_id),
 FOREIGN KEY(e_id) references waiter(e_id),
 FOREIGN KEY(c_id,booking_date,booking_time) references reservation(c_id,booking_date,booking_time)) 
 ENGINE = InnoDB;

create table books
(c_id int,
 booking_date date,
 booking_time time,
 table_no int,
 slot_id int NOT NULL,
 PRIMARY KEY(table_no,c_id,booking_date,booking_time),
 FOREIGN KEY(c_id,booking_date,booking_time) references reservation(c_id,booking_date,booking_time),
 FOREIGN KEY(table_no) references dining_table(table_no),
 FOREIGN KEY(slot_id) references date_time_slot(slot_id)) 
 ENGINE = InnoDB;



##creating views for commonly-viewed consolidated data

create view current_bookings as
select *
from books natural join dining_table natural join date_time_slot
where res_date>=curdate();

create view past_year_hire_stats as
select deptno, count(*)
from employee
where floor(datediff(curdate(),join_date) / 365.25)<=1
group by deptno;

create view priority_customers as
select c.c_id, c.cname, c.mobile_no
from customer as c, receipts
where (select count(*) from receipts where receipts.c_id=c.c_id)>10
order by c.c_id;



##creating procedures and triggers to facilitate data modification and ensure consistency with completeness

delimiter //

create procedure booking()
begin
select "Please enter the booking details for this reservation" as NOTE;
select * from dining_table;
select * from date_time_slot;
select "Choose a dining table and a time slot for your current booking" as NOTE2;
select "Please insert your booking into BOOKS(c_id int, booking_date date, booking_time time, table_no int, slot_id int) against the following reservation data" as NOTE3;
select * from reservation order by booking_date desc, booking_time desc limit 1;
end;//

create procedure reference()
begin
select * from current_bookings;
select "See for Reference" as "^";
end;//



create trigger check_c_contact before insert on customer for each row
begin
if (new.c_email not like "%@%.%") then
signal sqlstate '45000' set message_text="Enter a valid email address.";
end if;
if (new.mobile_no not like "__________") then
signal sqlstate '45000' set message_text="Enter a valid 10-digit mobile number.";
end if;
end;//

create trigger check_e_contact before insert on employee for each row
begin
if (new.mobile_no not like "__________") then
signal sqlstate '45000' set message_text="Enter a valid 10-digit mobile number.";
end if;
end;//

create trigger valid_slot before insert on date_time_slot for each row
begin
if (new.res_date<curdate()) then
signal sqlstate '45000' set message_text="Expired date. Enter a valid one.";
end if;
end;//

create trigger manage_reservation before insert on reservation for each row
begin
set new.booking_date=curdate();
set new.booking_time=curtime();
end;//

create trigger manage_reservation_1 after insert on reservation for each row
begin
declare w_id, ck_id int;
select e_id into w_id from waiter order by rand() limit 1;
select e_id into ck_id from cook order by rand() limit 1;
insert into served_by values(new.c_id,new.booking_date,new.booking_time,w_id);
insert into food_prepared_by values(new.c_id,new.booking_date,new.booking_time,ck_id);
end;//

##after each new reservation call procedure booking() to book tables and slots for the reservation

create trigger handle_booking_clash before insert on books for each row
begin
declare bk_count int;
select count(*) into bk_count from books where table_no=new.table_no and slot_id=new.slot_id;
if (bk_count>0) then
signal sqlstate '45000' set message_text="2 different bookings can't have same table at same time. (table_no, slot_id) must be unique. Please call booking() again.";
end if;
end;//

##call reference() post a booking clash to see the current bookings already made

create table audit_of_booking (user_name varchar(30), table_name varchar(30), update_info timestamp)//

create trigger auditing before insert on books for each row
begin
insert into audit_of_booking (user_name, table_name, update_info) values (current_user(),'books', now());
end;//


delimiter ;


##populating the database initially

insert into customer values(775,"Kelly Clark","12 A Palm Lane",9759345689,"kellyc@mail.com");
insert into customer values(456,"Dean Holmes","13 Sezville",9759123456,"dean.holmes@mail.com");
insert into customer values(872,"Neha Pathak","14 B Civil Lines",9759777456,"neha11@mail.com");
insert into customer values(221,"James Gill","15 Toy Garden",9759128856,"james_g@mail.com");
insert into customer values(452,"Anna Jones","16 E Haytown",9759129996,"anna.j@mail.com");

insert into department values(1,"Attendance",300000);
insert into department values(2,"Kitchen",500000);
insert into department values(3,"Billing",200000);
insert into department values(4,"Supervision",1000000);

insert into dining_table values(1,6,"IndoorRegular");
insert into dining_table values(2,4,"Terrace");
insert into dining_table values(3,4,"Outdoor");
insert into dining_table values(4,4,"IndoorRegular");
insert into dining_table values(5,2,"IndoorSpecial");
insert into dining_table values(6,10,"Terrace");

insert into employee values(1,"Peter",1,8954123456,"12 Elm Street",15000,'2000-10-05');
insert into employee values(2,"Emily",3,9759123456,"221B Baker Street",24000,'2010-11-22');
insert into employee values(3,"Aria",2,8954678456,"421 Rosewood",40000,'2002-10-05');
insert into employee values(4,"Akon",2,8777123456,"2 A Windville",35000,'2005-12-05');
insert into employee values(5,"Peter",1,8954123345,"1 C Haytown",12000,'2007-10-05');
insert into employee values(6,"Sam",3,8954127890,"12 H  Haytown",10000,'2009-11-05');
insert into employee values(7,"Max",1,8954478456,"10 Elm Street",10000,'2000-10-05');
insert into employee values(8,"Henry",4,8954130956,"12 B Palm Lane",60000,'2016-10-05');
insert into employee values(9,"Robert",1,8894123456,"22 C Ket Road",12000,'2017-04-05');
insert into employee values(10,"Anna",2,8954733456,"24 D Glow Lane",30000,'2017-08-09');

insert into date_time_slot values(1,'2017-12-09','21:15:00','Rush');
insert into date_time_slot values(2,'2018-03-19','16:45:00','Relaxed');
insert into date_time_slot values(3,'2017-11-22','11:30:00','Relaxed');
insert into date_time_slot values(4,'2017-11-08','22:00:00','Rush');
insert into date_time_slot values(5,'2017-11-21','20:30:00','Rush');

insert into waiter values(1,'Busboy');
insert into waiter values(5,'Head Waiter');
insert into waiter values(7,'Busboy');
insert into waiter values(9,'Head Waiter');

insert into cook values(3,4,'Both');
insert into cook values(4,3,'Veg');
insert into cook values(10,5,'Non-Veg');

insert into cashier values(2,'Graduate');
insert into cashier values(6,'12th Pass');
 